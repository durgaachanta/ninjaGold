{"version":3,"sources":["redux.js","component/GoldCount.js","component/GoldAction.js","component/GoldHistory.js","container/NinjaGoldParent.js","App.js","serviceWorker.js","index.js"],"names":["initialState","winnings","store","createStore","state","arguments","length","undefined","action","console","log","payload","type","Object","objectSpread","window","__REDUX_DEVTOOLS_EXTENSION__","connect","count","totalCoins","props","react_default","a","createElement","id","GoldAction","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goldAction","detail","min","max","_this2","map","item","className","onClick","generateCoins","React","Component","data","Message","NinjaGoldParent","componentDidMount","axios","get","then","response","updateState","catch","error","randomlyGenerateCoins","coinsGenerated","Math","floor","random","sign","concat","post","coinsEarned","status","component_GoldCount","component_GoldAction","component_GoldHistory","dispatch","updateStateAction","App","container_NinjaGoldParent","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb7f9ec6.chunk.js","sourcesContent":["//create Store\nimport { createStore } from 'redux';\n\nconst initialState = {\n  winnings: {},\n}\nexport const updateStateAction = (data) => ({\n  type: \"UPDATE_STATE\",\n  payload: data,\n\n});\n\nexport const reducer = (state = initialState, action) => {\n  console.log(action.payload);\n  console.log(state);\n  switch (action.type) {\n    case \"UPDATE_STATE\":\n      return {\n        ...state,\n        winnings: action.payload,\n      }\n    default:\n      return state;\n  }\n\n\n};\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/goldcount.css';\n\nconst GoldCount = (props) => {\n  return (\n    <div id=\"goldcount\">\n      <h1>Gold Count: {props.count}</h1>\n    </div>\n  );\n\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.winnings.totalCoins,\n});\n\nexport default connect(mapStateToProps, null)(GoldCount);","import React from 'react';\nimport '../styles/goldaction.css';\n\nclass GoldAction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      goldAction: [\n        {\n          action: \"Farm\",\n          detail: \"Earns 2-5 Gold\",\n          min: 2,\n          max: 5,\n        },\n        {\n          action: \"Cave\",\n          detail: \"Earns 5-10 Gold\",\n          min: 5,\n          max: 10,\n        },\n        {\n          action: \"Casino\",\n          detail: \"Earn up to or Lose up to 100 Gold\",\n          min: -100,\n          max: 100,\n        },\n        {\n          action: \"House\",\n          detail: \"Earns 7-15 Gold\",\n          min: 7,\n          max: 15,\n        },\n      ],\n\n    };\n\n  };\n\n\n\n  render() {\n    return (\n      <div id=\"goldactionbody\">\n        {this.state.goldAction.map((item) => {\n          return (\n            <div className=\"goldaction\">\n              <h1>{item.action}</h1>\n              <h3>{item.detail}</h3>\n              <button className=\"btn\" onClick={() => { this.props.generateCoins(item.min, item.max, item.action) }}>{item.action}</button>\n            </div>\n          )\n        })}\n\n      </div>\n\n    );\n  }\n\n}\nexport default GoldAction;","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/goldhistory.css';\n\nconst GoldHistory = (props) => {\n  console.log(props.winnings);\n\n  return (\n    <div id=\"goldHistorybody\">\n      <h2>History:</h2>\n      <ul>\n        {props.winnings !== undefined ? props.winnings.map((item) => {\n          console.log(item)\n          return <li>{item.Message}</li>\n        }) : ''}\n      </ul>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => ({\n  winnings: state.winnings.data,\n});\n\nexport default connect(mapStateToProps, null)(GoldHistory);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport GoldCount from '../component/GoldCount';\nimport GoldAction from '../component/GoldAction';\nimport GoldHistory from '../component/GoldHistory';\nimport { updateStateAction } from '../redux';\nimport '../styles/ninjagoldparent.css';\n\nclass NinjaGoldParent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n\n  };\n\n  //load the redux store when the app loads\n  componentDidMount = () => {\n    //axios fetch call\n    axios.get('/fetchgoldcoinsstatus')\n      .then((response) => {\n        //push all the data fetched back from MockAPI into store\n        // dispatch an action\n        console.log(response.data);\n        this.props.updateState(response.data);\n\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  randomlyGenerateCoins = (min, max, action) => {\n    const coinsGenerated = Math.floor(Math.random() * (max - min + 1)) + min;\n    var Message;\n    console.log(\"random coins\", coinsGenerated);\n    if (Math.sign(coinsGenerated) === -1) {\n      Message = `You've lost ${coinsGenerated} gold coins at the Casino`;\n    }\n    else {\n      Message = `You've earned ${coinsGenerated} gold coins at the ${action}`;\n    }\n    //console.log(message);\n    //post call to store history data\n    axios.post('/postHistory', {\n      Message,\n      coinsEarned: coinsGenerated,\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          //push all the data fetched back from MockAPI into store\n          // dispatch an action\n          this.props.updateState(response.data);\n\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n  }\n\n  render() {\n    return (\n      <div id=\"goldparentcontainer\">\n        {/* all my components will go here */}\n        <GoldCount />\n        <GoldAction generateCoins={this.randomlyGenerateCoins} />\n        <GoldHistory />\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateState: (data) => {\n    dispatch(updateStateAction(data))\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NinjaGoldParent);","import React, { Component } from 'react';\nimport NinjaGoldParent from './container/NinjaGoldParent';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NinjaGoldParent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}